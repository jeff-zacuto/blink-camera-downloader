# Blink Credentials - Insert your own!
$email = "youremail"
$password = "yourpassword"

# Blink's API Server
$blinkAPIServer = 'rest-prod.immedia-semi.com'

# Save Directory - Inser your own!
$saveDirectory = "C:\yourdirectory"

# Headers for authentication
$headers = @{
    "Host" = "$blinkAPIServer"
    "Content-Type" = "application/json"
}

# Credential data
$body = @{
    "email" = "$email"
    "password" = "$password"
    "unique_id" = "00000000-1111-0000-1111-00000000000"
} | ConvertTo-Json

# Login URL of Blink API
$uri = "https://$blinkAPIServer/api/v5/account/login"

# Authenticate credentials with Blink Server and get our token for future requests
$response = Invoke-RestMethod -UseBasicParsing $uri -Method Post -Headers $headers -Body $body

if(-not $response){
    Write-Host "Invalid credentials provided. Please verify email and password."
    exit
}

# Get the object data
$region = $response.account.tier
$authToken = $response.auth.token
$accountID = $response.account.account_id
$clientID = $response.account.client_id

# Get PIN from user
$pin = Read-Host -Prompt 'Input PIN'
$uri = 'https://rest-'+ $region +".immedia-semi.com/api/v4/account/"+ $accountID +'/client/'+ $clientID +"/pin/verify"

# Headers for PIN authentication
$pin_headers = @{
   "CONTENT-TYPE" = "application/json"
   "TOKEN-AUTH" = $authToken
}

# PIN goes in the body
$pin_body = @{
    "pin" = $pin
} | ConvertTo-Json

# Verify PIN
$pin_response = Invoke-RestMethod -UseBasicParsing $uri -Method Post -Headers $pin_headers -Body $pin_body

if(-not $pin_response){
    Write-Host "Invalid Pin response. Please re-run the script again and use the same pin within the first minute."
    exit
}

# Headers for subsequent requests
$headers = @{
    "TOKEN_AUTH" = "$authToken"
}

# Get list of networks
$uri = 'https://rest-'+ $region +".immedia-semi.com/api/v1/camera/usage"
$sync_units = Invoke-RestMethod -UseBasicParsing $uri -Method Get -Headers $headers

foreach($sync_unit in $sync_units.networks){
    $network_id = $sync_unit.network_id
    $networkName = $sync_unit.name

    foreach($camera in $sync_unit.cameras){
        $cameraName = $camera.name
        $cameraId = $camera.id
        $uri = 'https://rest-'+ $region +".immedia-semi.com/network/$network_id/camera/$cameraId"

        $camera = Invoke-RestMethod -UseBasicParsing $uri -Method Get -Headers $headers

        # Create directory to store videos if it doesn't exist
        $path = "$saveDirectory\Blink\$networkName\$cameraName"
        if (-not (Test-Path $path)){
            New-Item -ItemType Directory -Path $path
        }

        # Get list of videos
        $uri = "https://rest-"+ $region +".immedia-semi.com/api/v1/accounts/"+ $accountID +"/media/changed?since=2015-04-19T23:11:20+0000&page=1"
        $response = Invoke-RestMethod -UseBasicParsing $uri -Method Get -Headers $headers

        # Download each video
        foreach($video in $response.media){
            $address = $video.media
            $timestamp = $video.created_at
            $network = $video.network_name
            $camera = $video.device_name
            $deleted = $video.deleted

            if($deleted -eq "True"){
                continue
            }

            # Get video timestamp in local time
            $videoTime = Get-Date -Date $timestamp -Format "yyyy-MM-dd_HH-mm-ss"

            # Download address of video clip
            $videoURL = "https://rest-"+ $region +".immedia-semi.com" + $address

            # Download video if it is new
            $videoPath = "$path\$videoTime.mp4"
            if (-not (Test-Path $videoPath)){
                try {
                    Invoke-RestMethod -UseBasicParsing $videoURL -Method Get -Headers $headers -OutFile $videoPath 
                    Write-Host "Downloading video for $camera camera in $network."
                } catch { 
                    Write-Host "Error downloading video for $camera camera in $network."
                }
            }
        }
    }
}

Write-Host "All new videos downloaded to $saveDirectory\Blink\"
